#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <assert.h>
#include "visit_writer.h"

/*possible bugs:
  - output of Q in visit writer is only leaving zeros
  - second phi position not getting any flux

*/

/*
typedef struct Metric{

  double g10; 
  double g11; 
  double g12;
  double g13;


} Metric; 
  //number of spacelike coordinates
  int ndims=2;
*/
double stream_function(double x, double y);
double X_physical(double, double);
double Y_physical(double, double);
double initial_condition(double x, double y);
double bc_x1i(double x, double y);
double bc_x1f(double x, double y);
double bc_x2i(double x, double y);
double bc_x2f(double x, double y);

float find_max(float a[], int n);

int main(int argc, char **argv){
  int i,j,k,n; 
  int nsteps=200;
  double dt =0.01;
  
  /* Computational (2D polar) grid coordinates */
  int nx1 = 50;
  int nx2 = 50;

  //number of ghost cells on both sides of each dimension
  //only need 1 for piecewise constant method
  int num_ghost = 1;
  int nx1_r = nx1;
  int nx2_r = nx2;
  nx1 += 2*num_ghost; 
  nx2 += 2*num_ghost; 

  /*non-ghost indices */
  int is = num_ghost;
  int ie= is+nx1_r; 
  int js = num_ghost;
  int je = js+nx2_r; 

  //convention: these ranges refer to the non-ghost cells
  //however, the ghost cells have real coordinate interpretations
  //this means that we must be sure that the number of ghost cells makes sense with the range of coordinates
  //this is a big problem if the phi polar coordinate runs the whole range [0,2pi) for example

  //further, all mesh structures (zonal and nodal) will be nx1 x nx2, although we may not fill the ghost entries with anything meaningful
  //this is to standardize the loop indexing from is:ie
  double lx1 = 2.0;
  double lx2 = 3.14159/2.0;
  double dx1 = lx1/(nx1_r-1);   
  double dx2 = lx2/(nx2_r-1);   

  double x1_i = 0.5;
  double x2_i = 0.0;

  double x1_f = x1_i + lx1;
  double x2_f = x2_i + lx2;

  /*Cell centered (zonal) values of computational coordinate position */
  double *x1 = (double *) malloc(sizeof(double)*nx1); 
  double *x2 = (double *) malloc(sizeof(double)*nx2);
  x1[is] = x1_i;
  x2[js] = x2_i;
  for(i=is+1; i<ie; i++){ 
    x1[i] = x1[i-1] + dx1;
    //    printf("%lf\n",x1[i]);
  }
  for(i=js+1; i<je; i++){
    x2[i] = x2[i-1] + dx2;
    //    printf("%lf\n",x2[i]);
  } 
  /*Mesh edge (nodal) values of computational coordinate position */
  double *x1_b = (double *) malloc(sizeof(double)*(nx1+1)); 
  double *x2_b = (double *) malloc(sizeof(double)*(nx2+1));
  x1_b[is] = x1_i - dx1/2;
  x2_b[js] = x2_i - dx2/2;
  for(i=is+1; i<=ie; i++){ 
    x1_b[i] = x1_b[i-1] + dx1;
    //    printf("%lf\n",x1_b[i]);
  }
  for(i=js+1; i<=je; i++){
    x2_b[i] = x2_b[i-1] + dx2;
    //    printf("%lf\n",x2_b[i]);
  } 

  /*Cell centered (zonal) values of physical coordinate position */
  //These must be 2D arrays since coordinate transformation is not diagonal
  //indexed by x1 rows and x2 columns
  double **x = (double **) malloc(sizeof(double *)*nx1); 
  double **y = (double **) malloc(sizeof(double *)*nx1);
  double *dataX = (double *) malloc(sizeof(double)*nx1*nx2);
  double *dataY = (double *) malloc(sizeof(double)*nx1*nx2);
  for(i=0; i<nx1; i++){
    x[i] = &(dataX[nx2*i]);
    y[i] = &(dataY[nx2*i]);
  }

  /*precompute coordinate mappings */
  for(i=is; i<ie; i++){
    for(j=js; j<je; j++){
      x[i][j] = X_physical(x1[i],x2[j]); 
      y[i][j] = Y_physical(x1[i],x2[j]); 
    }
  }
  /*Mesh edge (nodal) values of physical coordinate position */
  double **x_b = (double **) malloc(sizeof(double *)*(nx1+1)); 
  double **y_b = (double **) malloc(sizeof(double *)*(nx1+1));
  double *dataXb = (double *) malloc(sizeof(double)*(nx1+1)*(nx2+1));
  double *dataYb = (double *) malloc(sizeof(double)*(nx1+1)*(nx2+1));
  for(i=0; i<=nx1; i++){
    x_b[i] = &(dataXb[(nx2+1)*i]);
    y_b[i] = &(dataYb[(nx2+1)*i]);
  }
  for(i=is; i<=ie; i++){
    for(j=js; j<=je; j++){
      x_b[i][j] = X_physical(x1_b[i],x2_b[j]); 
      y_b[i][j] = Y_physical(x1_b[i],x2_b[j]); 
      //      printf("%lf %lf\n",x[i][j],y[i][j]);
    }
  }


  /*Coordinate capacity */
  double **kappa;
  double *datakappa;
  kappa = (double **) malloc(sizeof(double *)*nx1);
  datakappa = (double *) malloc(sizeof(double)*nx1*nx2);
  for(i=0; i<nx1; i++){
    kappa[i] = &(datakappa[nx2*i]);
  }
  
  for(i=is; i<ie; i++)
    for(j=js; j<je; j++)
      kappa[i][j] = x1[i]*dx1*dx2/(dx1*dx2); // C_ij/(dx1*dx2)???
  
  /* Stream function */ //probably dont need this array
  //this variable is cell centered stream 
  double **stream;
  double *datastream;
  stream = (double **) malloc(sizeof(double *)*nx1);
  datastream = (double *) malloc(sizeof(double)*nx1*nx2);
  for(i=0; i<nx1; i++){
    stream[i] = &(datastream[nx2*i]);
  }
  for(i=is; i<ie; i++){
    for(j=js; j<je; j++){
      stream[i][j] = stream_function(x[i][j],y[i][j]);
    }
  }

  /*Average normal edge velocities */
  //now we move from cell centered quantities to edge quantities 
  //the convention in this code is that index i refers to i-1/2 edge
  double **U, **V;
  double *dataU, *dataV; 
  U = (double **) malloc(sizeof(double *)*nx1);
  V = (double **) malloc(sizeof(double *)*nx1);
  dataU = (double *) malloc(sizeof(double)*nx1*nx2);
  dataV = (double *) malloc(sizeof(double)*nx1*nx2);
  for(i=0; i<nx1; i++){
    U[i] = &(dataU[nx2*i]);
    V[i] = &(dataV[nx2*i]);
  }

  for(i=is; i<ie; i++){
    for(j=js; j<je; j++){ //go an additional step to capture nx2_r+1/2
      //average the corner stream functions
      U[i][j]= (stream_function(X_physical(x1[i]-dx1/2,x2[j]+dx2/2),Y_physical(x1[i]-dx1/2,x2[j]+dx2/2)) - 
		stream_function(X_physical(x1[i]-dx1/2,x2[j]-dx2/2),Y_physical(x1[i]-dx1/2,x2[j]-dx2/2)))/(dx2);
      V[i][j]= -(stream_function(X_physical(x1[i]+dx1/2,x2[j]-dx2/2),Y_physical(x1[i]+dx1/2,x2[j]-dx2/2)) - 
		 stream_function(X_physical(x1[i]-dx1/2,x2[j]-dx2/2),Y_physical(x1[i]-dx1/2,x2[j]-dx2/2)))/dx1;
      /* if (i==24){
	printf("i=%d j=%d U,V = %lf,%lf\n",i,j,U[i][j],V[i][j]); 
	//printf("r[i] = %lf, phi[j] = %lf\n",x1[i],x2[j]);
	printf("top corner (x,y)_cartesian = (%lf,%lf)\n",X_physical(x1[i]-dx1/2,x2[j]+dx2/2),Y_physical(x1[i]-dx1/2,x2[j]+dx2/2));  
	printf("bottom corner (x,y)_cartesian = (%lf,%lf)\n",X_physical(x1[i]-dx1/2,x2[j]-dx2/2),Y_physical(x1[i]-dx1/2,x2[j]-dx2/2));  
	printf("right corner (x,y)_cartesian = (%lf,%lf)\n",X_physical(x1[i]+dx1/2,x2[j]-dx2/2),Y_physical(x1[i]+dx1/2,x2[j]-dx2/2)); } */
    }
    j=je;
    U[i][j]= (stream_function(X_physical(x1[i]-dx1/2,x2[j-1]+3*dx2/2),Y_physical(x1[i]-dx1/2,x2[j-1]+3*dx2/2)) - 
	      stream_function(X_physical(x1[i]-dx1/2,x2[j-1]+dx2/2),Y_physical(x1[i]-dx1/2,x2[j-1]+dx2/2)))/(dx2);
    V[i][j]= -(stream_function(X_physical(x1[i]+dx1/2,x2[j-1]+dx2/2),Y_physical(x1[i]+dx1/2,x2[j-1]+dx2/2)) - 
	      stream_function(X_physical(x1[i]-dx1/2,x2[j-1]+dx2/2),Y_physical(x1[i]-dx1/2,x2[j-1]+dx2/2)))/dx1;
    /*      if (i==24){
	    printf("i=%d j=%d U,V = %lf,%lf\n",i,j,U[i][j],V[i][j]); } */
  }
  i=ie;
  for(j=js; j<je; j++){
    U[i][j]= (stream_function(X_physical(x1[i-1]+dx1/2,x2[j]+dx2/2),Y_physical(x1[i-1]+dx1/2,x2[j]+dx2/2)) - 
	      stream_function(X_physical(x1[i-1]+dx1/2,x2[j]-dx2/2),Y_physical(x1[i-1]+dx1/2,x2[j]-dx2/2)))/(dx2);
    V[i][j]= -(stream_function(X_physical(x1[i-1]+3*dx1/2,x2[j]-dx2/2),Y_physical(x1[i-1]+3*dx1/2,x2[j]-dx2/2)) - 
	      stream_function(X_physical(x1[i-1]+dx1/2,x2[j]-dx2/2),Y_physical(x1[i-1]+dx1/2,x2[j]-dx2/2)))/dx1;
  }

  /*Conserved variable on the computational coordinate mesh*/
  double **Q;
  double *dataQ;
  //make contiguous multiarray                                                                                                
  Q = (double **) malloc(sizeof(double *)*nx1);
  dataQ = (double *) malloc(sizeof(double)*nx1*nx2);
  for(i=0; i<nx1; i++){
    Q[i] = &(dataQ[nx2*i]);
  }
  /*Initial condition */
  //specified as a function of cartesian physical cooridnates, as is the stream function
  for(i=is; i<ie; i++){
    for(j=js; j<je; j++){
      Q[i][j] = initial_condition(x[i][j],y[i][j]); 
      if (Q[i][j] != 0.0){
	printf("i=%d, j=%d\n",i,j);
	printf("r=%lf, phi=%lf\n",x1[i],x2[j]);
	printf("x=%lf, y=%lf\n",X_physical(x1[i],x2[j]),Y_physical(x1[i],x2[j]));
	printf("x=%lf, y=%lf\n",x[i][j],y[i][j]);
      }
    }
  }

  printf("x=%lf, y=%lf\n",X_physical(x1[42],x2[15]),Y_physical(x1[42],x2[15]));
  printf("x=%lf, y=%lf\n",x[42][15],y[42][15]);

  //fluctuation variables
  double U_plus,U_minus,V_plus,V_minus;
  double **net_fluctuation;
  double *dataFlux;
  net_fluctuation = (double **) malloc(sizeof(double *)*nx1);
  dataFlux = (double *) malloc(sizeof(double)*nx1*nx2);
  for(i=0; i<nx1; i++){
    net_fluctuation[i] = &(dataFlux[nx2*i]);
  }

  /* Using Visit VTK writer */
  char filename[20];
  int dims[] = {nx1_r+1, nx2_r+1, 1}; //dont output ghost cells. //nodal variables have extra edge point
  int nvars = 2;
  int vardims[] = {1, 3}; //Q is a scalar, velocity is a 3-vector 
  int centering[] = {0, 1}; // Q is cell centered, velocity is defined at edges
  const char *varnames[] = {"Q", "edge_velocity"};
  /* Curvilinear mesh points stored x0,y0,z0,x1,y1,z1,...*/
  //An array of size nI*nJ*nK*3 . These points are nodal, not zonal... unfortunatley
  float *pts = (float *) malloc(sizeof(float)*(nx1_r+1)*(nx2_r+1)*3); 
  //The array should be layed out as (pt(i=0,j=0,k=0), pt(i=1,j=0,k=0), ...
  //pt(i=nI-1,j=0,k=0), pt(i=0,j=1,k=0), ...).
  int index=0; 
  for(k=0; k<1; k++){
    for(j=js; j<=je; j++){
      for(i=is; i<=ie; i++){
	pts[index] = x_b[i][j];
	pts[++index] = y_b[i][j];
	pts[++index] = 0.0;
	index++;
      }
    }
  }
  /* pack U and V into a vector */
  float *edge_vel = (float *) malloc(sizeof(float)*nx1_r*nx2_r*3); //An array of size nI*nJ*nK*3 
  index=0; 
  for(k=0; k<1; k++){
    for(j=js; j<=je; j++){
      for(i=is; i<=ie; i++){
	edge_vel[index] = U[i][j];
	edge_vel[++index] = V[i][j];
	edge_vel[++index] = 0.0;
	index++;
      }
    }
  } 
  //  vars       An array of variables.  The size of vars should be nvars.
  //                 The size of vars[i] should be npts*vardim[i].
  float *realQ; 
  realQ =(float *) malloc(sizeof(double)*nx1_r*nx2_r);
  float *vars[] = {(float *) realQ, (float *)edge_vel};
  return(0);
  /*-----------------------*/
  /* Main timestepping loop */
  /*-----------------------*/
  for (n=0; n<nsteps; n++){
    /*Boundary conditions */
    //bcs are specified along a computational coord direction, but are a function of the physical coordinate of adjacent "real cells"
    for(k=0;k<num_ghost; k++){
      for (j=0; j<nx2; j++){
	Q[k][j] = bc_x1i(x[is][j],y[is][j]);
	Q[nx1-num_ghost][j] = bc_x1f(x[is][j],y[is][j]);
	/* printf("Q[%d][%d] = %lf\n",k,j,Q[k][j]);
	   printf("Q[%d][%d] = %lf\n",nx1-num_ghost,j,Q[nx1-num_ghost][j]); */
      }
      for (i=0; i<nx1; i++){
	Q[i][k] = bc_x2i(x[i][js],y[i][js]);
	Q[i][nx2-num_ghost] = bc_x2f(x[i][je],y[i][je]);
	/*	printf("Q[%d][%d] = %lf\n",i,k,Q[i][k]);
		printf("Q[%d][%d] = %lf\n",i,nx2-num_ghost,Q[i][nx2-num_ghost]);*/
      }
    }

    /* Donor cell upwinding */
    for (i=is; i<=ie; i++){
      for (j=js; j<=je; j++){
	/* Fluctuations in first coordinate */
	U_plus = fmax(U[i][j],0.0); // max{U_{i-1/2,j},0.0} LHS boundary
	U_minus = fmin(U[i+1][j],0.0); // min{U_{i+1/2,j},0.0} RHS boundary
	net_fluctuation[i][j] = dt/(kappa[i][j]*dx1)*(U_plus*(Q[i][j] - Q[i-1][j]) + U_minus*(Q[i+1][j] - Q[i][j]));
	/* Fluctuations in second coordinate */
	V_plus = fmax(V[i][j],0.0); // max{V_{i,j-1/2},0.0} LHS boundary
	V_minus = fmin(V[i][j+1],0.0); // min{V_{i,j+1/2},0.0} RHS boundary
	net_fluctuation[i][j] += dt/(kappa[i][j]*dx2)*(V_plus*(Q[i][j] - Q[i][j-1]) + V_minus*(Q[i][j+1] - Q[i][j])); //dividing by kappa in ghost cell....
	/*	if (j==je-1 && i ==24){
	 printf("i= %d j=%d, V[i][j] = %lf V[i][j+1] = %lf\n",i,j,V[i][j],V[i][j+1]); 
	 printf("Q_{j-1} = %lf Q = %lf Q_{j+1} = %lf\n",Q[i][j-1],Q[i][j],Q[i][j+1]);
	 printf("v+ = %lf v-= %lf net_flux = %lf\n",V_plus,V_minus,net_fluctuation[i][j]);} */
      }
    }


    /*Apply fluctuations */
    for (i=is; i<=ie; i++)
      for (j=js; j<=je; j++){
	Q[i][j] -= net_fluctuation[i][j];
      }
    /*Output */
    //for now, explicitly copy subarray corresponding to real zonal info:
    index=0; 
    for (k=0; k<1; k++){
      for (j=js; j<je; j++){
	for (i=is; i<ie; i++){
	  //index =(j-num_ghost)*nx2_r + (i-num_ghost); 
	  realQ[index] = (float) Q[i][j]; 
	  index++;
	  //if (Q[i][j] != 0.0)
	    //	    printf("%lf\n",realQ[(j-num_ghost)*nx2_r + (i-num_ghost)]); 
	}
      }
    }

    sprintf(filename,"advect-%.3d.vtk",n); 
    write_curvilinear_mesh(filename,3,dims, pts, nvars,vardims, centering, varnames, vars);
    printf("step: %d time: %lf max{Q} = %lf\n",n+1,(n+1)*dt,find_max(realQ,nx1_r*nx2_r));
  }
  return(0); 
}

/* Map to physical (cartesian) coordinates */
double X_physical(double x1, double x2){
  double x_cartesian = x1*cos(x2); 
  return(x_cartesian); 
}
double Y_physical(double x1, double x2){
  double y_cartesian = x1*sin(x2); 
  return(y_cartesian); 
}

/*Stream function in physical coordinates */
double stream_function(double x, double y){
  //  return(y); //stream1: velocity is moving in the y-direction
  double radius = sqrt(x*x + y*y); 
  double phi = atan2(y,x); 
  return(radius);  //stream2: velocity is moving clockwise
  //  return(phi); //stream3: radially outward velocity
  //  return(phi+radius); 
}

double initial_condition(double x, double y){
  if ((x>1.0) && (x<1.5) && (y>1.0) && (y<1.5)){
    return(1.0);
  }
  return(0.0);
}

//for 2D polar coordinates:
//bc at innermost radius
double bc_x1i(double x, double y){
  //  if ((y > 0.2) && (y < 0.3 ))
  //return(1.0); 
  return(0.0);
}
//bc at outermost radius
double bc_x1f(double x, double y){
  return(0.0);
}
//bc at phi=0.0
double bc_x2i(double x, double y){
  return(0.0);
}
//bc at phi=pi/2 (upper part of circle quadrant)
double bc_x2f(double x, double y){
  //  if ((y > 1.0) && (y < 1.5))
  //return(1.0);
  return(0.0);
}

float find_max(float a[], int n) {
  int i,index;
  float max; 
  max = a[0];
  index = 0;
  for (i = 1; i < n; i++) {
    if (a[i] > max) {
      index = i;
      max = a[i];
    }
  }
  return(max); 
}
